name: Update MITRE ATT&CK Fleet Policies

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Mondays at 2 AM UTC
  workflow_dispatch:      # Manual trigger option
    inputs:
      force_update:
        description: 'Force update even if no changes detected'
        type: boolean
        default: false

permissions:
  contents: write    # Repository operations
  actions: read      # Workflow metadata
  metadata: read     # Repository metadata

env:
  UPSTREAM_REPO: 'https://github.com/teoseller/osquery-attck.git'
  COMMIT_TRACKING_FILE: '.last_osquery_commit'
  POLICIES_DIR: 'policies'
  TECHNIQUES_DIR: 'policies/by-technique'

jobs:
  update-policies:
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
      with:
        node-version: '20'
        
    - name: Install Fleet CLI
      run: |
        echo "📦 Installing Fleet CLI with error handling..."
        
        # Install Fleet CLI with retry logic
        MAX_RETRIES=3
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          if npm install -g fleetctl; then
            echo "✅ Fleet CLI installed successfully"
            break
          else
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "❌ Fleet CLI installation attempt $RETRY_COUNT failed"
            
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "⏳ Waiting 5 seconds before retry..."
              sleep 5
            else
              echo "💥 Failed to install Fleet CLI after $MAX_RETRIES attempts"
              echo "This could be due to:"
              echo "- npm registry connectivity issues"
              echo "- Package availability problems"
              echo "- GitHub Actions runner limitations"
              exit 1
            fi
          fi
        done
        
        # Verify installation and log version
        if fleetctl --version; then
          echo "✅ Fleet CLI verification successful"
        else
          echo "❌ Fleet CLI installation verification failed"
          echo "The package may have installed but is not working correctly"
          exit 1
        fi
        
    - name: Clone upstream repository
      run: |
        echo "🔄 Cloning upstream repository with retry logic..."
        
        # Retry logic for git clone operation
        MAX_RETRIES=3
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          if git clone $UPSTREAM_REPO temp-osquery-attck; then
            echo "✅ Successfully cloned upstream repository"
            break
          else
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "❌ Clone attempt $RETRY_COUNT failed"
            
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "⏳ Waiting 10 seconds before retry..."
              sleep 10
              rm -rf temp-osquery-attck 2>/dev/null || true
            else
              echo "💥 Failed to clone after $MAX_RETRIES attempts"
              echo "Please check:"
              echo "- Network connectivity"
              echo "- Upstream repository availability: $UPSTREAM_REPO"
              echo "- GitHub Actions runner DNS resolution"
              exit 1
            fi
          fi
        done
        
        # Extract commit information with error handling
        if cd temp-osquery-attck; then
          if LATEST_COMMIT=$(git rev-parse HEAD 2>/dev/null); then
            echo "LATEST_COMMIT=$LATEST_COMMIT" >> $GITHUB_ENV
            echo "✅ Latest upstream commit: $LATEST_COMMIT"
          else
            echo "❌ Failed to get commit SHA from upstream repository"
            exit 1
          fi
        else
          echo "❌ Failed to enter upstream repository directory"
          exit 1
        fi
        
    - name: Check for changes
      id: check_changes
      run: |
        if [ -f "$COMMIT_TRACKING_FILE" ]; then
          STORED_COMMIT=$(cat $COMMIT_TRACKING_FILE)
          echo "Stored commit: $STORED_COMMIT"
        else
          STORED_COMMIT=""
          echo "No stored commit found - first run"
        fi
        
        if [ "$LATEST_COMMIT" != "$STORED_COMMIT" ] || [ "${{ github.event.inputs.force_update }}" = "true" ]; then
          echo "Changes detected or force update requested"
          echo "has_changes=true" >> $GITHUB_OUTPUT
        else
          echo "No changes detected"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Process configuration files
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        echo "Finding .conf files..."
        find temp-osquery-attck -name "*.conf" -type f > conf_files_list.txt
        
        CONF_COUNT=$(wc -l < conf_files_list.txt)
        echo "Found $CONF_COUNT .conf files"
        
        if [ $CONF_COUNT -eq 0 ]; then
          echo "Error: No .conf files found"
          exit 1
        fi
        
        # Create temporary directory for converted files
        mkdir -p temp_yml_files
        
        # Convert files
        SUCCESS_COUNT=0
        FAIL_COUNT=0
        
        echo "Converting .conf files to Fleet YAML..."
        while IFS= read -r conf_file; do
          filename=$(basename "$conf_file" .conf)
          echo "Processing: $filename"
          
          if fleetctl convert -f "$conf_file" > "temp_yml_files/${filename}.yml" 2>/dev/null; then
            if [ -s "temp_yml_files/${filename}.yml" ]; then
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              echo "✓ Successfully converted: $filename"
            else
              rm -f "temp_yml_files/${filename}.yml"
              FAIL_COUNT=$((FAIL_COUNT + 1))
              echo "✗ Empty output for: $filename"
            fi
          else
            FAIL_COUNT=$((FAIL_COUNT + 1))
            echo "✗ Failed to convert: $filename"
          fi
        done < conf_files_list.txt
        
        echo "Conversion completed: $SUCCESS_COUNT successful, $FAIL_COUNT failed"
        
        if [ $SUCCESS_COUNT -eq 0 ]; then
          echo "Error: No successful conversions"
          exit 1
        fi
        
        echo "SUCCESS_COUNT=$SUCCESS_COUNT" >> $GITHUB_ENV
        echo "FAIL_COUNT=$FAIL_COUNT" >> $GITHUB_ENV
        
    - name: Improve query names and platform targeting
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        echo "🔧 Improving query names and platform targeting..."
        
        # Install yq
        echo "Installing yq..."
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
        
        # Process each converted YAML file
        for yml_file in temp_yml_files/*.yml; do
          if [ -f "$yml_file" ]; then
            filename=$(basename "$yml_file" .yml)
            echo "Processing: $filename"
            
            # Determine platform based on filename
            platform=""
            if [[ "$filename" =~ ^linux ]] || [[ "$filename" =~ generic ]]; then
                platform="linux"
            elif [[ "$filename" =~ ^windows ]]; then
                platform="windows"
            else
                platform=""
            fi
            
            # Use yq to improve query names
            temp_improved="${yml_file}.improved"
            
            yq_exit_code=0
            if [ -n "$platform" ]; then
                yq eval-all '
                    select(.kind == "query") |
                    .spec.name = ("MITRE - " + ((.spec.description // "") | split(" - ATT&CK")[0] | split(" - ATTACK")[0])) |
                    .spec.platform = "'"$platform"'"
                ' "$yml_file" > "$temp_improved" 2>/dev/null || yq_exit_code=$?
            else
                yq eval-all '
                    select(.kind == "query") |
                    .spec.name = ("MITRE - " + ((.spec.description // "") | split(" - ATT&CK")[0] | split(" - ATTACK")[0]))
                ' "$yml_file" > "$temp_improved" 2>/dev/null || yq_exit_code=$?
            fi
            
            if [ $yq_exit_code -eq 0 ] && [ -s "$temp_improved" ] && grep -q "kind: query" "$temp_improved"; then
                mv "$temp_improved" "$yml_file"
                echo "✓ Successfully improved: $filename"
            else
                rm -f "$temp_improved"
                if [ -n "$platform" ]; then
                    sed -i "s/^  platform: .*/  platform: $platform/" "$yml_file" 2>/dev/null
                fi
                echo "~ Used fallback for: $filename"
            fi
          fi
        done
        
        echo "✅ Query improvement completed"
        
    - name: Generate policy files
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        # Create directories
        mkdir -p $POLICIES_DIR $TECHNIQUES_DIR
        
        # Generate complete policy file combining all individual files
        > $POLICIES_DIR/mitre-attck-complete.yml
        
        FIRST_FILE=true
        for yml_file in temp_yml_files/*.yml; do
          if [ -f "$yml_file" ]; then
            if [ "$FIRST_FILE" = true ]; then
              FIRST_FILE=false
              cat "$yml_file" >> $POLICIES_DIR/mitre-attck-complete.yml
            else
              echo "---" >> $POLICIES_DIR/mitre-attck-complete.yml
              tail -n +2 "$yml_file" >> $POLICIES_DIR/mitre-attck-complete.yml
            fi
          fi
        done
        
        # Create individual technique files
        for yml_file in temp_yml_files/*.yml; do
          if [ -f "$yml_file" ]; then
            filename=$(basename "$yml_file" .yml)
            cp "$yml_file" "$TECHNIQUES_DIR/${filename}.yml"
          fi
        done
        
        echo "Generated $(ls temp_yml_files/*.yml | wc -l) individual technique files"
        
    - name: Validate generated policies
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        echo "🔍 Validating generated Fleet policies..."
        
        VALIDATION_ERRORS=0
        
        # Check if complete policy file exists and has content
        if [ ! -f "$POLICIES_DIR/mitre-attck-complete.yml" ] || [ ! -s "$POLICIES_DIR/mitre-attck-complete.yml" ]; then
          echo "❌ Complete policy file is missing or empty"
          VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
        else
          echo "✅ Complete policy file exists and has content"
        fi
        
        # Validate file structure
        if ! grep -q "^---" "$POLICIES_DIR/mitre-attck-complete.yml"; then
          echo "❌ Complete policy file missing YAML document separators"
          VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
        else
          echo "✅ Complete policy file has proper YAML structure"
        fi
        
        # Check individual technique files
        TECHNIQUE_COUNT=$(find "$TECHNIQUES_DIR" -name "*.yml" | wc -l)
        if [ $TECHNIQUE_COUNT -eq 0 ]; then
          echo "❌ No individual technique files generated"
          VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
        else
          echo "✅ Generated $TECHNIQUE_COUNT individual technique files"
          
          # Validate individual files have proper YAML structure
          INVALID_INDIVIDUAL=0
          for yml_file in "$TECHNIQUES_DIR"/*.yml; do
            if [ -f "$yml_file" ]; then
              if ! grep -q "^---" "$yml_file" || ! grep -q "^kind: query" "$yml_file"; then
                echo "❌ Invalid YAML structure in $(basename "$yml_file")"
                INVALID_INDIVIDUAL=$((INVALID_INDIVIDUAL + 1))
              fi
            fi
          done
          
          if [ $INVALID_INDIVIDUAL -eq 0 ]; then
            echo "✅ All individual files have proper YAML structure"
          else
            echo "❌ $INVALID_INDIVIDUAL files have invalid structure"
            VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
          fi
        fi
        
        # Validate Fleet query structure
        echo "🔍 Running Fleet query structure validation..."
        
        # Count Fleet query documents
        VALID_QUERIES=$(grep -c "^kind: query" "$POLICIES_DIR/mitre-attck-complete.yml" 2>/dev/null || echo "0")
        API_VERSIONS=$(grep -c "^apiVersion: v1" "$POLICIES_DIR/mitre-attck-complete.yml" 2>/dev/null || echo "0")
        SPEC_SECTIONS=$(grep -c "^spec:" "$POLICIES_DIR/mitre-attck-complete.yml" 2>/dev/null || echo "0")
        
        # Check for YAML syntax errors
        if grep -q "^[[:space:]]*-[[:space:]]*$" "$POLICIES_DIR/mitre-attck-complete.yml"; then
          echo "❌ Found malformed YAML list items"
          VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
        elif [ "$VALID_QUERIES" -eq 0 ]; then
          echo "❌ No Fleet queries found in policy file"
          VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
        elif [ "$VALID_QUERIES" != "$API_VERSIONS" ] || [ "$VALID_QUERIES" != "$SPEC_SECTIONS" ]; then
          echo "❌ Inconsistent Fleet query structure (queries: $VALID_QUERIES, apiVersions: $API_VERSIONS, specs: $SPEC_SECTIONS)"
          VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
        else
          echo "✅ Fleet query structure validation passed ($VALID_QUERIES queries found)"
          echo "Note: fleetctl dry-run only supports config/team specs, not query specs"
        fi
        
        # File size validation
        COMPLETE_SIZE=$(wc -c < "$POLICIES_DIR/mitre-attck-complete.yml")
        if [ $COMPLETE_SIZE -lt 1000 ]; then
          echo "❌ Complete policy file suspiciously small ($COMPLETE_SIZE bytes)"
          VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
        else
          echo "✅ Complete policy file has reasonable size ($COMPLETE_SIZE bytes)"
        fi
        
        # Validation summary
        echo "📊 Validation Summary:"
        echo "- Validation errors: $VALIDATION_ERRORS"
        echo "- Complete policy size: $COMPLETE_SIZE bytes"
        echo "- Individual technique files: $TECHNIQUE_COUNT"
        
        if [ $VALIDATION_ERRORS -gt 0 ]; then
          echo "❌ Validation failed with $VALIDATION_ERRORS errors"
          echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
          exit 1
        else
          echo "✅ All validations passed successfully"
          echo "VALIDATION_FAILED=false" >> $GITHUB_ENV
        fi
        
    - name: Generate documentation
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        cat > README.md << 'EOF'
        # Fleet MITRE ATT&CK Detection Policies
        
        This repository contains automatically generated Fleet policies based on the MITRE ATT&CK framework, converted from osquery configurations provided by the [teoseller/osquery-attck](https://github.com/teoseller/osquery-attck) project.
        
        ## Quick Start
        
        ### Deploy All Policies
        ```bash
        # Download and apply all MITRE ATT&CK policies
        curl -O https://raw.githubusercontent.com/$(echo $GITHUB_REPOSITORY)/main/policies/mitre-attck-complete.yml
        fleetctl apply -f mitre-attck-complete.yml
        ```
        
        ### Deploy Individual Techniques
        ```bash
        # Apply specific techniques
        fleetctl apply -f policies/by-technique/T1003-credential-dumping.yml
        ```
        
        ### Validate Before Applying
        ```bash
        # Test configuration before applying
        fleetctl apply --dry-run -f mitre-attck-complete.yml
        ```
        
        ## Repository Structure
        
        ```
        policies/
        ├── mitre-attck-complete.yml    # All policies combined
        └── by-technique/               # Individual technique files
            ├── T1003-credential-dumping.yml
            ├── T1055-process-injection.yml
            └── ...
        ```
        
        ## Policy Information
        
        - **Total Policies**: __POLICY_COUNT__ successfully converted
        - **Last Updated**: __GENERATION_TIME__
        - **Source Commit**: __SOURCE_COMMIT__
        - **Update Schedule**: Weekly (Mondays at 2 AM UTC)
        
        ## Usage Notes
        
        - All policies are automatically generated from upstream osquery configurations
        - Policies are updated weekly when changes are detected in the source repository
        - Each policy file includes metadata about its source and generation time
        - Use `fleetctl apply --dry-run` to validate policies before deployment
        
        ## Requirements
        
        - Fleet server with appropriate permissions
        - fleetctl CLI tool installed
        - Network access to download policy files
        
        ## Support
        
        For issues with the policies themselves, please refer to the upstream [osquery-attck](https://github.com/teoseller/osquery-attck) repository.
        
        For Fleet-specific questions, consult the [Fleet documentation](https://fleetdm.com/docs).
        EOF
        
        # Replace placeholders with actual values
        sed -i "s/__POLICY_COUNT__/$SUCCESS_COUNT/g" README.md
        sed -i "s/__GENERATION_TIME__/$(date -u +"%Y-%m-%d %H:%M:%S UTC")/g" README.md
        sed -i "s/__SOURCE_COMMIT__/$LATEST_COMMIT/g" README.md
        
    - name: Update commit tracking
      if: steps.check_changes.outputs.has_changes == 'true' && env.VALIDATION_FAILED == 'false'
      run: |
        echo "$LATEST_COMMIT" > $COMMIT_TRACKING_FILE
        
    - name: Commit and push changes
      if: steps.check_changes.outputs.has_changes == 'true' && env.VALIDATION_FAILED == 'false'
      run: |
        echo "📝 Committing and pushing changes with error handling..."
        
        # Configure git with error handling
        if ! git config --local user.email "action@github.com"; then
          echo "❌ Failed to configure git user email"
          exit 1
        fi
        
        if ! git config --local user.name "GitHub Action"; then
          echo "❌ Failed to configure git user name"
          exit 1
        fi
        
        # Add files with error handling
        if ! git add .; then
          echo "❌ Failed to stage files for commit"
          exit 1
        fi
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "⚠️ No changes to commit - this may indicate an issue with file generation"
          echo "Generated files may not have been created or modified"
        else
          echo "✅ Changes detected, proceeding with commit..."
          
          # Create commit with error handling
          if git commit -m "$(cat <<EOF
Update MITRE ATT&CK Fleet policies

- Source commit: $LATEST_COMMIT
- Policies generated: $SUCCESS_COUNT
- Failed conversions: $FAIL_COUNT
- Updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

🤖 Generated with Fleet Policy Automation

Co-Authored-By: GitHub Actions <noreply@github.com>
EOF
)"; then
            echo "✅ Commit created successfully"
          else
            echo "❌ Failed to create commit"
            echo "This could be due to:"
            echo "- Git configuration issues"
            echo "- Repository permissions"
            echo "- File system problems"
            exit 1
          fi
          
          # Push with retry logic
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if git push; then
              echo "✅ Changes pushed successfully"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "❌ Push attempt $RETRY_COUNT failed"
              
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "⏳ Waiting 5 seconds before retry..."
                sleep 5
              else
                echo "💥 Failed to push after $MAX_RETRIES attempts"
                echo "This could be due to:"
                echo "- Network connectivity issues"
                echo "- Repository permissions"
                echo "- Branch protection rules"
                echo "- Authentication problems"
                exit 1
              fi
            fi
          done
        fi
        
    - name: Create release
      if: steps.check_changes.outputs.has_changes == 'true' && env.VALIDATION_FAILED == 'false'
      uses: softprops/action-gh-release@01570a1f39cb168c169c802c3bceb9e93fb10974 # v2.2.0
      with:
        tag_name: "policies-$(date -u +%Y%m%d-%H%M%S)"
        name: "MITRE ATT&CK Policies - $(date -u +"%Y-%m-%d")"
        body: |
          ## MITRE ATT&CK Fleet Policies Update
          
          **Generated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Source Commit**: ${{ env.LATEST_COMMIT }}
          **Policies**: ${{ env.SUCCESS_COUNT }} successful conversions
          **Failed**: ${{ env.FAIL_COUNT }} failed conversions
          
          ### Quick Deploy
          ```bash
          curl -O https://github.com/${{ github.repository }}/releases/latest/download/mitre-attck-complete.yml
          fleetctl apply -f mitre-attck-complete.yml
          ```
          
          ### Files in this release:
          - `mitre-attck-complete.yml` - All policies combined
          - Individual technique files in `by-technique/` directory
          
          🤖 Automatically generated from [teoseller/osquery-attck](https://github.com/teoseller/osquery-attck)
        files: |
          policies/mitre-attck-complete.yml
          policies/by-technique/*.yml
        draft: false
        prerelease: false
        
    - name: Cleanup
      if: always()
      run: |
        rm -rf temp-osquery-attck temp_yml_files conf_files_list.txt || true
        
    - name: Summary
      if: steps.check_changes.outputs.has_changes == 'true' && env.VALIDATION_FAILED == 'false'
      run: |
        echo "## Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Source Commit**: $LATEST_COMMIT" >> $GITHUB_STEP_SUMMARY
        echo "- **Successful Conversions**: $SUCCESS_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "- **Failed Conversions**: $FAIL_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "- **Generation Time**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
        echo "- **Release Created**: Yes" >> $GITHUB_STEP_SUMMARY
        
    - name: Validation failure summary
      if: steps.check_changes.outputs.has_changes == 'true' && env.VALIDATION_FAILED == 'true'
      run: |
        echo "## Validation Failed ❌" >> $GITHUB_STEP_SUMMARY
        echo "Policy generation completed but validation failed." >> $GITHUB_STEP_SUMMARY
        echo "- **Source Commit**: $LATEST_COMMIT" >> $GITHUB_STEP_SUMMARY
        echo "- **Successful Conversions**: $SUCCESS_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "- **Failed Conversions**: $FAIL_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "- **Validation Status**: FAILED" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "No files were committed due to validation failures." >> $GITHUB_STEP_SUMMARY
        echo "Review the workflow logs for detailed validation errors." >> $GITHUB_STEP_SUMMARY
        
    - name: No changes summary
      if: steps.check_changes.outputs.has_changes == 'false'
      run: |
        echo "## No Changes Detected" >> $GITHUB_STEP_SUMMARY
        echo "No updates were made as no changes were detected in the upstream repository." >> $GITHUB_STEP_SUMMARY
        echo "- **Latest Commit**: $LATEST_COMMIT" >> $GITHUB_STEP_SUMMARY
        echo "- **Check Time**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY